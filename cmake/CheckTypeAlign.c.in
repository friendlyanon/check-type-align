@headers@

#undef KEY
#if defined(__i386)
# define KEY '_','_','i','3','8','6'
#elif defined(__x86_64)
# define KEY '_','_','x','8','6','_','6','4'
#elif defined(__PPC64__)
# define KEY '_','_','P','P','C','6','4','_','_'
#elif defined(__ppc64__)
# define KEY '_','_','p','p','c','6','4','_','_'
#elif defined(__PPC__)
# define KEY '_','_','P','P','C','_','_'
#elif defined(__ppc__)
# define KEY '_','_','p','p','c','_','_'
#elif defined(__aarch64__)
# define KEY '_','_','a','a','r','c','h','6','4','_','_'
#elif defined(__ARM_ARCH_7A__)
# define KEY '_','_','A','R','M','_','A','R','C','H','_','7','A','_','_'
#elif defined(__ARM_ARCH_7S__)
# define KEY '_','_','A','R','M','_','A','R','C','H','_','7','S','_','_'
#endif

/* Standard */
#ifdef __cplusplus
# if __cplusplus >= 201103L
#  define ALIGN (alignof(@type@))
# endif
#elif __STDC_VERSION__ >= 201112L
# define ALIGN (_Alignof(@type@))
#endif

/*
 * Compiler specific
 * TODO: add more compilers with versions checks where necessary
 */
#ifndef ALIGN
# if defined(_MSC_VER)
#  define ALIGN (__alignof(@type@))
# elif defined(__GNUC__) || defined(__clang__) || defined(__TINYC__) \
  || defined(__INTEL_COMPILER) || defined(__CC_ARM) || defined(__ibmxl__) \
  || defined(__xlC__) || defined(_CRAYC)
#  define ALIGN (__alignof__(@type@))
# elif defined(__EDG__) || defined(__IAR_SYSTEMS_ICC__)
#  define ALIGN (__ALIGNOF__(@type@))
# endif
#endif

/*
 * Fallback
 * This possibly raises a warning if the value's width changes after casting
 * Not guaranteed to work with "universal" binaries without warnings
 */
#ifndef ALIGN
struct ALIGN_type { char c; @type@ d; };
# define ALIGN ((@fallback_cast_type@)&((struct ALIGN_type *)0)->d)
#endif

static char info_align[] =  {'I','N','F','O',':','a','l','i','g','n','[',
  ('0' + ((ALIGN / 10000) % 10)),
  ('0' + ((ALIGN / 1000) % 10)),
  ('0' + ((ALIGN / 100) % 10)),
  ('0' + ((ALIGN / 10) % 10)),
  ('0' +  (ALIGN % 10)),
  ']',
#ifdef KEY
  ' ','k','e','y','[',KEY,']',
#endif
  '\0'};

#ifdef __CLASSIC_C__
int main(argc, argv) int argc; char *argv[];
#else
int main(int argc, char *argv[])
#endif
{
  int require = 0;
  require += info_align[argc];
  (void)argv;
  return require;
}
